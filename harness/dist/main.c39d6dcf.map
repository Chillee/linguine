{"version":3,"sources":["main.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,GAAA,GAAA,YAAA,CAAA,OAAA,CAAA,eAAA,CAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEA,WAAS,IAAT,GAAa;AACX,QAAI,EAAE,GAAG,GAAG,CAAC,KAAJ,CAAU,MAAV,CAAT,CADW,CAGX;;AACA,QAAI,OAAO,GAAG,GAAG,CAAC,cAAJ,CAAmB,EAAnB,EACZ,OAAO,CAAC,cAAD,CADK,EAEZ,OAAO,CAAC,gBAAD,CAFK,CAAd,CAJW,CASX;;AACA,QAAI,eAAe,GAAG,GAAG,CAAC,UAAJ,CAAe,EAAf,EAAmB,OAAnB,EAA4B,aAA5B,CAAtB;AACA,QAAI,SAAS,GAAG,GAAG,CAAC,UAAJ,CAAe,EAAf,EAAmB,OAAnB,EAA4B,OAA5B,CAAhB;AACA,QAAI,UAAU,GAAG,GAAG,CAAC,UAAJ,CAAe,EAAf,EAAmB,OAAnB,EAA4B,QAA5B,CAAjB;AACA,QAAI,UAAU,GAAG,GAAG,CAAC,UAAJ,CAAe,EAAf,EAAmB,OAAnB,EAA4B,QAA5B,CAAjB;AACA,QAAI,aAAa,GAAG,GAAG,CAAC,SAAJ,CAAc,EAAd,EAAkB,OAAlB,EAA2B,WAA3B,CAApB;AACA,QAAI,WAAW,GAAG,GAAG,CAAC,SAAJ,CAAc,EAAd,EAAkB,OAAlB,EAA2B,SAA3B,CAAlB,CAfW,CAiBX;;AACA,QAAI,IAAI,GAAG,GAAG,CAAC,QAAJ,CAAa,EAAb,CAAX,CAlBW,CAoBX;;AACA,QAAI,KAAK,GAAG,WAAA,CAAA,IAAA,CAAK,MAAL,EAAZ,CArBW,CAuBX;;AACA,QAAI,KAAK,GAAG,WAAA,CAAA,IAAA,CAAK,UAAL,CAAgB,GAAhB,EAAqB,EAArB,EAAyB,GAAzB,CAAZ;;AAEA,aAAS,MAAT,CAAgB,IAAhB,EAA4B,UAA5B,EAA4C;AAC1C;AACA,MAAA,WAAA,CAAA,IAAA,CAAK,OAAL,CAAa,KAAb,EAAoB,KAApB,EAA2B,GAA3B,EAF0C,CAI1C;;AACA,MAAA,EAAE,CAAC,UAAH,CAAc,OAAd,EAL0C,CAO1C;;AACA,MAAA,EAAE,CAAC,gBAAH,CAAoB,eAApB,EAAqC,KAArC,EAA4C,UAA5C;AACA,MAAA,EAAE,CAAC,gBAAH,CAAoB,SAApB,EAA+B,KAA/B,EAAsC,IAAtC;AACA,MAAA,EAAE,CAAC,gBAAH,CAAoB,UAApB,EAAgC,KAAhC,EAAuC,KAAvC;AACA,MAAA,EAAE,CAAC,UAAH,CAAc,UAAd,EAA0B,KAA1B,EAX0C,CAa1C;;AACA,MAAA,GAAG,CAAC,kBAAJ,CAAuB,EAAvB,EAA2B,WAA3B,EAAwC,IAAI,CAAC,OAA7C,EAAsD,CAAtD;AACA,MAAA,GAAG,CAAC,kBAAJ,CAAuB,EAAvB,EAA2B,aAA3B,EAA0C,IAAI,CAAC,SAA/C,EAA0D,CAA1D,EAf0C,CAiB1C;;AACA,MAAA,GAAG,CAAC,QAAJ,CAAa,EAAb,EAAiB,IAAjB;AACD;AACF;;AAED,EAAA,IAAI","file":"main.c39d6dcf.map","sourceRoot":"../benchmarks/phong","sourcesContent":["import * as lgl from '../lglexample';\r\nimport { mat4, vec3 } from 'gl-matrix';\r\n\r\nfunction main() {\r\n  let gl = lgl.setup(render);\r\n\r\n  // Compile our shaders.\r\n  let program = lgl.compileProgram(gl,\r\n    require('./vertex.lgl'),\r\n    require('./fragment.lgl')\r\n  );\r\n\r\n  // Uniform and attribute locations.\r\n  let loc_uProjection = lgl.uniformLoc(gl, program, 'uProjection');\r\n  let loc_uView = lgl.uniformLoc(gl, program, 'uView');\r\n  let loc_uModel = lgl.uniformLoc(gl, program, 'uModel');\r\n  let loc_uLight = lgl.uniformLoc(gl, program, 'uLight');\r\n  let loc_aPosition = lgl.attribLoc(gl, program, 'aPosition');\r\n  let loc_aNormal = lgl.attribLoc(gl, program, 'aNormal');\r\n\r\n  // We'll draw a teapot.\r\n  let mesh = lgl.getBunny(gl);\r\n\r\n  // Initialize the model position.\r\n  let model = mat4.create();\r\n\r\n  // Position the light source for the lighting effect.\r\n  let light = vec3.fromValues(20., 0., 20.);\r\n\r\n  function render(view: mat4, projection: mat4) {\r\n    // Rotate the model a little bit on each frame.\r\n    mat4.rotateY(model, model, .01);\r\n\r\n    // Use our shader pair.\r\n    gl.useProgram(program);\r\n\r\n    // Set the shader \"uniform\" parameters.\r\n    gl.uniformMatrix4fv(loc_uProjection, false, projection);\r\n    gl.uniformMatrix4fv(loc_uView, false, view);\r\n    gl.uniformMatrix4fv(loc_uModel, false, model);\r\n    gl.uniform3fv(loc_uLight, light);\r\n\r\n    // Set the attribute arrays.\r\n    lgl.bind_attrib_buffer(gl, loc_aNormal, mesh.normals, 3);\r\n    lgl.bind_attrib_buffer(gl, loc_aPosition, mesh.positions, 3);\r\n\r\n    // Draw the object.\r\n    lgl.drawMesh(gl, mesh);\r\n  }\r\n}\r\n\r\nmain();\r\n"]}