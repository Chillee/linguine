tag model is vec3;
tag world is vec3;
tag camera is vec3;
tag rot<`t : vec3> is vec3; // Rotated by 90 degrees counterclockwise around the z-axis as an example
tag norm<`t : vec> is `t;
tag hom<`t : vec3> is vec4;

declare norm<`t> normalize<`t : vec>(`t v);
declare vec4 vec4(vec3 v, float f);
declare vec3 vec3(vec4 v);
declare float dot<`t : vec>(norm<`t> v1, norm<`t> v2);

hom<`t> homify<`t : vec3>(`t v) {
    return vec4(v as vec3, 1.) as hom<`t>;
}

hom<`t> homNorm<`t : vec3>(norm<`t> v) {
    return vec4(v as vec3, 0.) as hom<`t>;
}

`t hom_reduce<`t : vec3>(hom<`t> v) {
    return vec3(v as vec4) as `t;
}

rot<`t> rotate<`t : vec3>(`t v) {
    `t->rot<`t> rotation_matrix = [[0., -1., 0.], [1., 0., 0.], [0., 0., 1.]];
    return rotation_matrix * v;
}

`t->rot<`u> rotate_matrix<`t : vec3, `u : vec3>(`t->`u m) {
    `u->rot<`u> rotation_matrix = [[0., -1., 0.], [1., 0., 0.], [0., 0., 1.]];
    return rotation_matrix * m;
}

`t rot_reduce<`t : vec3>(rot<rot<rot<rot<`t>>>> v) {
    return v as `t;
}

void main() {
    model uPosition = [1., 1., 1.];
    norm<model> uNorm = [0., 0., 1.];
    hom<model>->hom<world> uModel = [[1., .5, 0., 0.], [0., 1., 0., 0.], [1., 0., 1., 0.], [0., 0., .5, 1.]];
    hom<world>->hom<camera> uWorld = [[1., .5, 0., 0.], [0., 1., 0., 0.], [1., 0., 1., 0.], [0., 0., .5, 1.]];
    world lightPos = [0., 1., 0.];

    float fail = dot<model>(uPosition, uNorm); //Expected uPosition to have type norm<model>
}