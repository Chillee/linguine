precision highp float;varying vec3 vPosition;uniform mat4 uModel;uniform mat4 uView;varying vec3 vNormal;uniform vec3 uLight;void main() {mat4 extendModel = mat4(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.);vec4 modelScale = vec4(0., 0., 0., 1.);mat4 collapseModel = mat4(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.);mat4 extendWorld = mat4(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.);vec4 worldScale = vec4(0., 0., 0., 1.);mat4 collapseWorld = mat4(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.);mat4 extendCamera = mat4(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.);vec4 cameraScale = vec4(0., 0., 0., 1.);mat4 collapseCamera = mat4(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.);mat4 extendColor = mat4(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.);vec4 opaque = vec4(0., 0., 0., 1.);vec4 getWorldW = vec4(0., 0., 0., 1.);mat3 modelAsColor = mat3(1., 0., 0., 0., 1., 0., 0., 0., 1.);mat3 worldAsColor = mat3(1., 0., 0., 0., 1., 0., 0., 0., 1.);mat3 vecAsWorld = mat3(1., 0., 0., 0., 1., 0., 0., 0., 1.);vec3 ambient = vec3(0.3, 0., 0.);vec3 diffuse = vec3(0.3, 0., 0.);vec3 spec = vec3(1., 1., 1.);vec3 worldPosition = vec3(collapseWorld * uModel * ((extendModel * vec4(vPosition, 0.) + modelScale)));vec3 worldNormal = vecAsWorld * (normalize((vec3(collapseWorld * uModel * (extendModel * vec4(vNormal, 0.))))));vec3 lightDir = vecAsWorld * (normalize(((uLight - worldPosition))));float lambertian = 0.;float lDot = dot(worldNormal, lightDir);bool lDotCheck = (0. <= lDot);if (lDotCheck){ lambertian = lDot; }{  }bool lCheck = ((0. <= lambertian) && !((lambertian == 0.)));vec3 viewDir = vecAsWorld * (normalize(((vec3(0., 0., 0.) - vec3(collapseCamera * uView * ((extendWorld * vec4(worldPosition, 0.) + vec4(0., 0., 0., 1.))))))));vec3 negLight = (vec3(0., 0., 0.) - lightDir);vec3 reflectDir = (negLight - (2. * dot(worldNormal, negLight)) * worldNormal);float specular = 0.;if (lCheck){ float specAngle = 0.;float specDot = dot(viewDir, reflectDir);bool specDotCheck = (0. <= specDot);if (specDotCheck){ specAngle = specDot; }{  }specular = ((((((specAngle * specAngle) * specAngle) * specAngle) * specAngle) * specAngle) * specAngle) * specAngle; }{  }vec3 fragColor = ((ambient + lambertian * diffuse) + specular * spec);gl_FragColor = (extendColor * vec4(fragColor, 0.) + opaque);}