// Blinn-Phong
// GLSL reference:
// https://learnopengl.com/Lighting/Basic-Lighting
// Note that some varying values are baked in differently here (e.g. vNormal vs. normalWorld)
// Thus we sometimes use Braid example as a reference
// https://capra.cs.cornell.edu/braid/dingus/#example=phong

tag model is vec3;
tag modelHom is vec4;
tag world is vec3;
tag worldHom is vec4;
tag camera is vec3;
tag cameraHom is vec4;
tag color is vec3;
tag alphaColor is vec4;

declare float dot(vec3 v1, vec3 v2);
declare vec3 normalize(vec3 v1); 

// parsing error : allow empty mains
void main(model vPosition, modelHom->worldHom uModel, worldHom->cameraHom uView, model vNormal, world uLight) {

    model->modelHom extendModel = [
        [1., 0., 0.],
        [0., 1., 0.],
        [0., 0., 1.],
        [0., 0., 0.]
    ];

    modelHom modelScale = [0., 0., 0., 1.];
    modelHom->model collapseModel = [ 
        [1., 0., 0., 0.],
        [0., 1., 0., 0.], 
        [0., 0., 1., 0.]
    ];

    world->worldHom extendWorld = [
        [1., 0., 0.],
        [0., 1., 0.],
        [0., 0., 1.],
        [0., 0., 0.]
    ];
    worldHom worldScale = [0., 0., 0., 1.];
    worldHom->world collapseWorld = [ 
        [1., 0., 0., 0.],
        [0., 1., 0., 0.], 
        [0., 0., 1., 0.]
    ];

    camera->cameraHom extendCamera = [
        [1., 0., 0.],
        [0., 1., 0.],
        [0., 0., 1.],
        [0., 0., 0.]
    ];
    cameraHom cameraScale = [0., 0., 0., 1.];
    cameraHom->camera collapseCamera = [ 
        [1., 0., 0., 0.],
        [0., 1., 0., 0.], 
        [0., 0., 1., 0.]
    ];

    color->alphaColor extendColor = [
        [1., 0., 0.],
        [0., 1., 0.],
        [0., 0., 1.],
        [0., 0., 0.]
    ];
    alphaColor opaque = [0., 0., 0., 1.];

    worldHom getWorldW = [0., 0., 0., 1.];

    model->color modelAsColor = [
        [1., 0., 0.],
        [0., 1., 0.],
        [0., 0., 1.]
    ];

    world->color worldAsColor = [
        [1., 0., 0.],
        [0., 1., 0.],
        [0., 0., 1.]
    ];

    // PARSING ERROR: allow vec3AsWorld
    vec3->world vecAsWorld = [
        [1., 0., 0.],
        [0., 1., 0.],
        [0., 0., 1.]
    ];
    
    // ****************
    // Ambient lighting 
    // ****************
    color ambient = [.3, 0., 0.];
    color diffuse = [.3, 0.0, 0.0];
    color spec = [1.0, 1.0, 1.0];

    // ****************
    // Diffuse lighting
    // ****************
    // Calculate the real position of this pixel in 3d space
    world worldPosition = collapseWorld * (uModel * ((extendModel * vPosition) + modelScale));
    world worldNormal = vecAsWorld * normalize(collapseWorld * (uModel * (extendModel * vNormal)));
    world lightDir = vecAsWorld * normalize(uLight - worldPosition);

    float lambertian = 0.0;
    float lDot = dot (worldNormal, lightDir);
    bool lDotCheck = (0. <= lDot);
    if (lDotCheck) {
        lambertian = lDot; 
    } else { 
        skip; 
    }

    bool lCheck = (0.0 <= lambertian && !(lambertian == 0.0));
    world viewDir = vecAsWorld * normalize([0., 0., 0.] - collapseCamera * (uView * ((extendWorld * worldPosition) + [0., 0., 0., 1.])));
    world negLight = [0., 0., 0.] - lightDir;

    // ****************
    // Specular lighting
    // ****************
    // See glsl reflection definition
    world reflectDir = negLight - (2. * (dot(worldNormal, negLight)) * worldNormal);
    float specular = 0.0;

    if (lCheck) {
        float specAngle = 0.;
        float specDot = dot (viewDir, reflectDir);
        bool specDotCheck = (0. <= specDot);
        if (specDotCheck) { 
            specAngle = specDot; 
        } else { 
            skip; 
        }
        specular = specAngle * specAngle * specAngle * specAngle * specAngle * specAngle * specAngle * specAngle;
    }
    else { 
        skip; 
    }

    color fragColor = ambient + lambertian * diffuse + specular * spec;
    alphaColor gl_FragColor = (extendColor * fragColor) + opaque;
}
