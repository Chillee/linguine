// Phong lighting with top types
// Referenced https://learnopengl.com/Lighting/Basic-Lighting

vec4->vec3 v4_v3 = [
    [1.,0.,0.,0.],
    [0.,1.,0.,0.],
    [0.,0.,1.,0.]
]:vec4->vec3;

vec3->vec4 v3_v4 = [
  [1., 0., 0.],
  [0., 1., 0.],
  [0., 0., 1.],
  [0., 0., 0.]
]:vec3->vec4;

// "in" variables
vec3 vPosition = [0., 0., 0.]:vec3;
vec3 uCameraPosition = [0., 0., 0.]:vec3;
vec4->vec4 uModel = [
  [0., 0., 0., 0.],
  [0., 0., 0., 0.],
  [0., 0., 0., 0.],
  [0., 0., 0., 0.]
]:vec4->vec4;
vec3 vNormal = [0., 0., 0.]:vec3;
vec3 uLight = [0., 0., 0.]:vec3;


vec3 color = [0.3, 0.8, 0.4]:vec3; // tasty orange
vec3 lightColor = [0.4, 0.3, 0.9]:vec3;

// ****************
// Ambient lighting 
// ****************
float ambientStrength = 0.5;
vec3 ambient = ambientStrength * lightColor;

// ****************
// Diffuse lighting
// ****************
// Calculate the real position of this pixel in 3d space
vec3 worldPos = v4_v3 * (uModel * ((v3_v4 * vPosition) + [0., 0., 0., 1.]:vec4));

// Calculate the normal including the model rotation and scale
vec3 worldNorm = norm(v4_v3 * (uModel * (v3_v4 * vNormal)));

vec3 lightDir = norm(uLight - worldPos);

// An example simple lighting effect, taking the dot product of the normal
float diff = (dot worldNorm lightDir);
bool diff_is_neg = (diff <= 0.);
if (diff_is_neg) {
    diff = 0.;
} else { skip; }

vec3 diffuse = diff * lightColor;

// ****************
// Specular lighting
// ****************

float specularStrength = 3.;

vec3 viewDir = norm(uCameraPosition - worldPos);

vec3->vec3 neg = [
    [-1., 0., 0.],
    [0., -1., 0.],
    [0., 0., -1.]
]:vec3->vec3;
vec3 reflectDir = (neg * lightDir) - 2. * (dot (neg * lightDir) vNormal) * vNormal;

float spec = dot viewDir reflectDir; 
bool spec_is_neg = (spec <= 0.);
if (spec_is_neg) {
    spec = 0.;
} else { skip; }

spec = spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec * spec; // We don't have a pow function yet..
vec3 specular = specularStrength * spec * lightColor;  

// Combining ambient, diffuse, and spectral lighting
vec3 result = (color .* (ambient + diffuse + specular)); 
vec4 gl_FragColor = (v3_v4 * result) + [0., 0., 0., 1.]:vec4;

print gl_FragColor;