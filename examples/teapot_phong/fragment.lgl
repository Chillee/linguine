tag color is vec3;
tag alphaColor is vec4;
tag model is vec3;
tag modelHom is vec4;
tag worldHom is vec4;
tag world is vec3;
tag cameraHom is vec4;
tag camera is vec3;
tag projectiveHom is vec4;

declare `t normalize<`t: genType>(`t v);
declare `t reflect<`t: genType>(`t v1, `t v2);
declare float dot<`t: genType>(`t v1, `t v2);
declare float max(float f1, float f2);
declare float pow(float f, float i);

alphaColor alpha(color c, float f) {
    color->alphaColor cta = [[1., 0., 0.], [0., 1., 0.], [0., 0., 1.], [0., 0., 0.]];
    return cta * c + [0., 0., 0., f];
}

color combineColors(color c1, color c2) {
    vec3->color v3_c = [[1.,0.,0.],[0.,1.,0.],[0.,0.,1.]];
    return v3_c * (c1 .* c2);
}

void main(model vPosition, model vNormal, world uLight, worldHom->cameraHom uView, modelHom->worldHom uModel) { 
    model->modelHom model_modelHom = [
      [1., 0., 0.],
      [0., 1., 0.],
      [0., 0., 1.],
      [0., 0., 0.]
    ];

    worldHom->world worldHom_world = [
        [1.,0.,0.,0.],
        [0.,1.,0.,0.],
        [0.,0.,1.,0.]
    ];

    world->worldHom world_worldHom = [
      [1., 0., 0.],
      [0., 1., 0.],
      [0., 0., 1.],
      [0., 0., 0.]
    ];

    cameraHom->camera cameraHom_camera = [
        [1.,0.,0.,0.],
        [0.,1.,0.,0.],
        [0.,0.,1.,0.]
    ];

    color objectColor = [0., 1., .8];
    color lightColor = [.5, .5, .5];
    float ambientStrength = .7;
    float specularStrength = .6;

    color ambientLight = ambientStrength * lightColor;

    world worldPos = worldHom_world * (uModel * ((model_modelHom * vPosition) + [0., 0., 0., 1.]));
    world norm = normalize<world>(worldHom_world * (uModel * (model_modelHom * vNormal)));
    world lightDir = normalize<world>(uLight - worldPos);
    float diff = max(dot<world>(norm, lightDir), 0.0);
    color diffuseLight = diff * lightColor;

    camera viewDir = normalize<camera>(-cameraHom_camera * (uView * ((world_worldHom * worldPos) + [0., 0., 0., 1.])));
    world worldReflectDir = reflect<world>(-lightDir, norm);
    camera reflectDir = cameraHom_camera * (uView * (world_worldHom * worldReflectDir));
    float spec = pow(max(dot<camera>(viewDir, reflectDir), 0.0), 16.);
    color specularLight = specularStrength * spec * lightColor;

    alphaColor gl_FragColor = alpha(combineColors(objectColor, ambientLight + diffuseLight + specularLight), .1);
    print gl_FragColor;
}