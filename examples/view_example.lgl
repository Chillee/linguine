// This is an example highlighting the 'look-at' calculation
// The js code this is derived from can be found at
// http://www.mathematik.uni-marburg.de/~thormae/lectures/graphics1/code/WebGLShaderLightMat/ShaderLightMat.html
// Under the mat4LookAt function
// (This won't look very interesting, but hopefully will illustrate an interesting matrix construction)

tag position is vec3;
tag model is vec4;
tag homogeneous is vec4;
tag direction is vec3;

float PI = 3.14159265;

vec3 vecX = [1., 0., 0.];
vec3 vecY = [0., 1., 0.];
vec3 getZ = [0., 0., 1.];
float T = 0;

float rad = PI / 180.0 * this.t

direction vEye = [1.5, 0., 1.5]; // 1.5*Math.cos(rad), 1.5*Math.sin(rad), 1.5
position vCenter = [0., 0., 0.];
direction vUp = [0., 0., 0.];

direction view = norm(vCenter-vEye);

// view x vUp
direction->direction crossUp = [
  [0., (0. - (dot vUp getZ)), (dot vUp getY)], //[0, -up.z, up.y]
  [(dot vUp getZ), 0., (0. - (dot vUp getX))], //[up.z, 0, -up.x]
  [(0. - (dot vUp getY)), (dot vUp getX), 0.]  //[-up.y, up.x, 0]
]:direction->direction;
direction right = norm(view * crossUp);

// right x view
direction->direction crossView = [
  [0., (0. - (dot view getZ)), (dot view getY)], //[0, -up.z, up.y]
  [(dot view getZ), 0., (0. - (dot view getX))], //[up.z, 0, -up.x]
  [(0. - (dot view getY)), (dot view getX), 0.]  //[-up.y, up.x, 0]
]:direction->direction;
direction normUp = norm(right * crossView);

homogeneous->homogeneous viewMatrix = [
  [(dot right getX), (dot right getY), (dot right getZ), (0. - (dot right vEye))],
  [(dot normUp getX), (dot normUp getY), (dot normUp getZ), (0. - (dot normUp vEye))],
  [(0. - (dot view getX)), (0. - dot view getY), (0. - dot view getZ), (dot view vEye)],
  [0., 0., 0., 1.]
]:homogeneous->homogeneous;

vec4 gl_FragColor = ((vNormal * extend) + [0., 0., 0., 1.]:vec4) * ;
print gl_FragColor;